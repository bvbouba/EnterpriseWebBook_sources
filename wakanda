{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPion/rPtgboGx9jvRULhQu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bvbouba/EnterpriseWebBook_sources/blob/master/wakanda\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IWpiqQjm0FGM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from datetime import datetime\n",
        "from fake_useragent import UserAgent\n",
        "from urllib.request import Request, urlopen\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "import urllib.parse\n",
        "from urllib.error import HTTPError\n",
        "import math\n",
        "import ssl\n",
        "from googletrans import Translator\n",
        "\n",
        "def normalize_num(num):\n",
        "    non_decimal = re.compile(r'[^\\d.-]+')\n",
        "    nom_decimal = non_decimal.sub('', num.replace(\",\",\".\")).replace(\" \",\"\")\n",
        "    return float(nom_decimal)\n",
        "\n",
        "class wkd:\n",
        "\n",
        "    def __init__(self):\n",
        "      pass\n",
        "\n",
        "    def DataReader(symbol='',market='brvm',start='',end='',time=''):\n",
        "        if market.lower() not in ['brvm','gse','ngse','lse','zse','bse','luse','mse']:\n",
        "          print('This market is not supported')\n",
        "          return None\n",
        "        if symbol in ['brvm','gse','ngse','lse','zse','bse','luse','mse']:\n",
        "          symbol=''\n",
        "     \n",
        "        if start:\n",
        "          try:\n",
        "            start = datetime.strptime(start, '%m-%d-%Y')\n",
        "          except:\n",
        "            print('somthing wrong with your start date! format should be m-d-y')\n",
        "            return None\n",
        "        if end:\n",
        "          try:\n",
        "            end = datetime.strptime(end, '%m-%d-%Y')\n",
        "          except:\n",
        "            print('somthing wrong with your start date! format should be m-d-y')\n",
        "            return None\n",
        "        df,htmlfile='',''\n",
        "\n",
        "        url = \"https://afx.kwayisi.org/chart/\"+market+'/'+symbol\n",
        "        try:\n",
        "          htmlfile = urlopen(url).read().decode()\n",
        "        except:\n",
        "          print('Something went wrong. Make sure the ticker is correct.\\n If yes, server might be down. try later' )\n",
        "        else:\n",
        "          #clean the data\n",
        "          beg = htmlfile.find(\"[[\")\n",
        "          stop = htmlfile.rfind(\"],]\")\n",
        "          histData_text = htmlfile[beg+2:stop].replace('d(\"','').replace('\")','').split(\"],[\")\n",
        "          chartData = []\n",
        "          for elem in histData_text:\n",
        "            chartData.append(elem.split(\",\"))\n",
        "\n",
        "          #get close price \n",
        "          df = pd.DataFrame(np.array(chartData),columns=['Date','Close price'])\n",
        "          df['Close price'] = pd.to_numeric(df['Close price'])\n",
        "          df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')\n",
        "          \n",
        "          # collect imformation about stock split\n",
        "          import mysql.connector\n",
        "          mydb = mysql.connector.connect(\n",
        "            host=\"sql3.freemysqlhosting.net\",\n",
        "            user=\"sql3340018\",\n",
        "            passwd=\"1Y58bzRGEl\",\n",
        "            database=\"sql3340018\"\n",
        "          )\n",
        "\n",
        "          #adjust price based on stock split \n",
        "          try:\n",
        "            mycursor = mydb.cursor()\n",
        "            sql_query = \"select * FROM stock_split where symbol=%s\"\n",
        "            mycursor.execute(sql_query,(symbol,))\n",
        "            myresult = mycursor.fetchall()\n",
        "          except:\n",
        "            print (\"Adjusted Price data unavailable at this time\")\n",
        "          else:\n",
        "            if myresult:\n",
        "              for i in myresult:\n",
        "                date = i[0]\n",
        "                split = i[1]\n",
        "                for j in list(df.index):\n",
        "                  d=1\n",
        "                  if df.loc[j,'Date'] < date:\n",
        "                    d=split\n",
        "                  df.loc[j,'Adj. price'] = int(df.loc[j,'Close price'])/d\n",
        "          \n",
        "          #filter base on start and end date\n",
        "          if start:\n",
        "            df = df[df['Date'] >= np.datetime64(start,'D')]\n",
        "          if end:\n",
        "            df = df[df['Date'] <= np.datetime64(end,'D')]\n",
        "\n",
        "\n",
        "\n",
        "          #change date format\n",
        "          df['Date'] = df['Date'].dt.strftime('%m-%d-%Y')\n",
        "          #reset index\n",
        "          df.reset_index(drop=True, inplace=True)\n",
        "\n",
        "        return df\n",
        "\n",
        "    def get_quote_av(symbol):\n",
        "      if isinstance(symbol, str):\n",
        "        symbol = [symbol]\n",
        "\n",
        "      url = 'https://www.brvm.org/fr/cours-actions/0'\n",
        "      ssl._create_default_https_context = ssl._create_unverified_context\n",
        "      header = {'User-Agent':str(UserAgent().chrome)}\n",
        "      req = Request(url, headers=header)\n",
        "      try:\n",
        "        html = urlopen(req).read()\n",
        "      except:\n",
        "        print('data is unaivalable for now. Check later')\n",
        "      else:\n",
        "        try:\n",
        "          soup = BeautifulSoup(html, \"html.parser\")\n",
        "        except AttributeError as e:\n",
        "          print(e)\n",
        "      market_status = ''\n",
        "      status = soup.find(\"div\",{\"class\":\"block-seance\"}).div.text\n",
        "      status = status.strip()\n",
        "      if status.find(\"Ouverte\") is not -1:\n",
        "          market_status = 'open'\n",
        "      elif status.find(\"fermÃ©e\") is not -1:\n",
        "          market_status = 'closed'\n",
        "\n",
        "      last_update=''\n",
        "      translator = Translator()\n",
        "      t = soup.find(\"section\",{\"id\":\"block-tools-date-maj\"}).text.strip().split(' : ')[1]\n",
        "      translated = translator.translate(t,src='fr').text\n",
        "      try:\n",
        "        last_update = datetime.strptime(translated, '%A, %B %d, %Y - %H:%M')\n",
        "      except ValueError as e:\n",
        "        print(e)\n",
        "      \n",
        "      current_price,price_change = {},{}\n",
        "      if market_status == 'open':  \n",
        "        for stock in soup.find(\"section\",{\"id\":\"slide-seance\"}).findAll(\"div\"):\n",
        "              item = stock.findAll(\"span\")\n",
        "              if len(item)>0:\n",
        "                  ticker = item[0].text.strip()\n",
        "                  if ticker in symbol:\n",
        "                      current_price[ticker]=(normalize_num(item[1].text.strip()))\n",
        "                      price_change[ticker]=(normalize_num(item[2].text.strip()))\n",
        "                    \n",
        "      volume,open_price,close_price,valid={},{},{},[]\n",
        "      for stock in soup.find(\"section\",{\"id\":\"block-system-main\"}).findAll(\"tr\"):\n",
        "        item = stock.findAll(\"td\")\n",
        "        if len(item)>0:\n",
        "          ticker = item[0].text.strip()\n",
        "          if ticker in symbol:\n",
        "            valid.append(ticker)\n",
        "            volume[ticker]=(normalize_num(item[2].text.strip()))\n",
        "            open_price[ticker]=(normalize_num(item[4].text.strip()))\n",
        "            close_price[ticker]=(normalize_num(item[5].text.strip()))\n",
        "\n",
        "      if market_status:\n",
        "        print('Market status: '+market_status)\n",
        "      if last_update:\n",
        "        print('Last update: '+last_update.strftime(\"%Y-%m-%d %H:%M\")+ ' UTC')\n",
        "      print('\\n')\n",
        "      if market_status == 'open':\n",
        "        print('            Current price          Volume      Open price')   \n",
        "        print('Symbol')   \n",
        "        for i in symbol:\n",
        "          if i in valid:\n",
        "            print(i ,'        ',current_price[i],'          ',volume[i],'        ',open_price[i])\n",
        "          else:\n",
        "            print(i ,'        not a valid symbol                                         ')         \n",
        "      elif market_status == 'closed':\n",
        "        print('            Close price           Volume        Open price')   \n",
        "        print('Symbol')   \n",
        "        for i in symbol:\n",
        "          if i in valid:\n",
        "            print(i ,'        ',close_price[i],'          ',volume[i],'        ',open_price[i])\n",
        "          else:\n",
        "            print(i ,'        not a valid symbol                                         ')                 \n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZFo9zMrt3Tz0",
        "colab_type": "code",
        "outputId": "8e906d26-2759-4b39-800d-23ba52dbc744",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        }
      },
      "source": [
        "wkd.DataReader('TNM',market='brvm')"
      ],
      "execution_count": 322,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Close price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>05-15-2009</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>05-20-2009</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>05-21-2009</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>05-22-2009</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>05-25-2009</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1758</th>\n",
              "      <td>05-07-2020</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1759</th>\n",
              "      <td>05-08-2020</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1760</th>\n",
              "      <td>05-11-2020</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1761</th>\n",
              "      <td>05-12-2020</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1762</th>\n",
              "      <td>05-13-2020</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1763 rows Ã 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            Date  Close price\n",
              "0     05-15-2009          2.0\n",
              "1     05-20-2009          2.0\n",
              "2     05-21-2009          2.0\n",
              "3     05-22-2009          2.0\n",
              "4     05-25-2009          2.0\n",
              "...          ...          ...\n",
              "1758  05-07-2020         22.0\n",
              "1759  05-08-2020         22.0\n",
              "1760  05-11-2020         22.0\n",
              "1761  05-12-2020         22.0\n",
              "1762  05-13-2020         22.0\n",
              "\n",
              "[1763 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 322
        }
      ]
    }
  ]
}